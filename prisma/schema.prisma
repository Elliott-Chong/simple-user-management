// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    systemRole        SystemRole         @default(user)
    accounts          Account[]
    sessions          Session[]
    userOrganizations UserOrganization[]
    userProjects      UserProject[]
}

model UserOrganization {
    id             String       @id @default(cuid())
    userId         String
    organizationId String
    role           OrgRole
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model UserProject {
    id        String  @id @default(cuid())
    userId    String
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Organization {
    id                String             @id @default(cuid())
    name              String
    projects          Project[]
    userOrganizations UserOrganization[]
    createdAt         DateTime           @default(now())
}

model Project {
    id             String        @id @default(cuid())
    name           String
    organizationId String
    organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    forms          Form[]
    createdAt      DateTime      @default(now())
    userProjects   UserProject[]
}

model Form {
    id        String   @id @default(cuid())
    name      String
    projectId String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum SystemRole {
    superadmin
    admin
    user
}

enum OrgRole {
    consultant
    upperManagementStakeholder
}
